<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YonderSharp</name>
    </assembly>
    <members>
        <member name="T:YonderSharp.Attributes.ForeignKey">
            <summary>
            A Foreign-Key that points to some <see cref="T:YonderSharp.Attributes.PrimaryKey"/>
            </summary>
        </member>
        <member name="P:YonderSharp.Attributes.ForeignKey.TargetClass">
            <summary>
            Type to which this ForeignKey points to
            </summary>
        </member>
        <member name="P:YonderSharp.Attributes.ForeignKey.TargetField">
            <summary>
            Field of the TargetClass to which the ForeignKey points to
            </summary>
        </member>
        <member name="M:YonderSharp.Attributes.ForeignKey.#ctor(System.Type,System.String)">
            <param name="targetClass">Class to which this FK points to</param>
            <param name="fieldName">Property of this class, to where the FK points to</param>
            <exception cref="T:System.ArgumentNullException">For the params className and fieldName</exception>
        </member>
        <member name="T:YonderSharp.Attributes.PrimaryKey">
            <summary>
            Identifies something as the unique primary key. Usually, but not necessarily a <see cref="T:System.Guid"/>
            </summary>
        </member>
        <member name="M:YonderSharp.Config.ConfigManager.GetAllKeys">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.Config.ConfigManager.GetValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.Config.ConfigManager.SetValue(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.Config.ConfigManager.Load">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.Config.ConfigManager.Save">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.Config.ConfigManager.Clear">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.Config.ConfigManager.SetDefaultConfig(System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.Config.IConfigManager.SetDefaultConfig(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets all key/value pairs for unknown keys.
            If the key is allready known, the existing configuration does not get overwritten!
            </summary>
        </member>
        <member name="M:YonderSharp.Config.IConfigManager.Clear">
            <summary>
            Deletes all Entries
            </summary>
        </member>
        <member name="M:YonderSharp.Downloads.IUrlDownloader.LoadFromUrl(System.String)">
            <summary>
            Download the string content of the url
            </summary>
        </member>
        <member name="M:YonderSharp.Downloads.IUrlDownloader.LoadFromUrl(System.String,System.Boolean)">
            <summary>
            Download the string content of the url, without any cache!
            </summary>
        </member>
        <member name="M:YonderSharp.Downloads.UrlDownloader.LoadFromUrl(System.String)">
            <summary>
            Load the htmlbody from the web
            </summary>
            <param name="url">url of the ressource</param>
        </member>
        <member name="M:YonderSharp.Downloads.UrlDownloader.LoadFromUrl(System.String,System.Boolean)">
            <summary>
            Load the htmlbody from the web
            </summary>
            <param name="url">url of the ressource</param>
            <param name="forceDownload">Doesnt try to read from the local cache if <b>TRUE</b></param>
            <returns>the string represenation of the htmlBody that has been downloaded</returns>
        </member>
        <member name="T:YonderSharp.FileSources.IFileSource`1">
            <summary>
            simple Elementsource form hard disk
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.GetPathToJsonFile">
            <summary>
            Where is the content stored on the hard disk?
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.Remove(`0)">
            <summary>
            Removes the element from the store
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.Add(`0)">
            <summary>
            Add single element
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.Add(System.Collections.Generic.IList{`0})">
            <summary>
            Add multiple elements to the list
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.GetAll">
            <summary>
            Get all elements known
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.Load">
            <summary>
            Deserialize the contents of the file into the list
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.Save">
            <summary>
            Stores all the objects into the file
            </summary>
        </member>
        <member name="T:YonderSharp.IdentityManagement.ILoginMailHelper">
            <summary>
            Methods for sending mails
            </summary>
        </member>
        <member name="M:YonderSharp.IdentityManagement.ILoginMailHelper.SendPasswordForgottenMail(YonderSharp.IdentityManagement.User)">
            <summary>
            The user forgot his password. Send him a mail that resets the password
            </summary>
        </member>
        <member name="M:YonderSharp.IdentityManagement.ILoginMailHelper.SendRegistrationVerification(YonderSharp.IdentityManagement.User)">
            <summary>
            Sends the mail that allows the verification of the ownership of the user of the used mail
            </summary>
        </member>
        <member name="T:YonderSharp.IdentityManagement.IPasswordHelper">
            <summary>
            Helping methods for Password related operations
            </summary>
        </member>
        <member name="M:YonderSharp.IdentityManagement.IPasswordHelper.CreateSalt">
            <summary>
            Creates an entirely new salt
            </summary>
        </member>
        <member name="M:YonderSharp.IdentityManagement.IPasswordHelper.CreatePasswordHash(System.String,System.String)">
            <summary>
            Creates the hash for the combination of the password and salt. 
            </summary>
            <param name="pwd">Password as provided by the user</param>
            <param name="salt">Salt (hopefully) provided by the system (db?)</param>
            <returns>the string representation of the hash</returns>
        </member>
        <member name="M:YonderSharp.IdentityManagement.IPasswordHelper.IsPasswordCorrect(System.String,System.String,System.String)">
            <summary>
            Checks if a password is valid
            </summary>
        </member>
        <member name="T:YonderSharp.IdentityManagement.PasswordHelper">
            <inheritdoc cref="T:YonderSharp.IdentityManagement.IPasswordHelper"/>
        </member>
        <member name="M:YonderSharp.IdentityManagement.PasswordHelper.#ctor(System.Int32)">
            <param name="saltSize">Length of the salt to use</param>
        </member>
        <member name="M:YonderSharp.IdentityManagement.PasswordHelper.CreateSalt">
            <inheritdoc cref="T:YonderSharp.IdentityManagement.IPasswordHelper"/>
        </member>
        <member name="M:YonderSharp.IdentityManagement.PasswordHelper.CreatePasswordHash(System.String,System.String)">
            <inheritdoc cref="T:YonderSharp.IdentityManagement.IPasswordHelper"/>
        </member>
        <member name="M:YonderSharp.IdentityManagement.PasswordHelper.IsPasswordCorrect(System.String,System.String,System.String)">
            <inheritdoc cref="T:YonderSharp.IdentityManagement.IPasswordHelper"/>
        </member>
        <member name="T:YonderSharp.IdentityManagement.Token">
            <summary>
            Client-Side Token for server access
            </summary>
        </member>
        <member name="P:YonderSharp.IdentityManagement.Token.UserId">
            <summary>
            Unique ID of the user
            </summary>
        </member>
        <member name="P:YonderSharp.IdentityManagement.Token.EMail">
            <summary>
            E-Mail Adress of the user. Most likely unique.
            </summary>
        </member>
        <member name="P:YonderSharp.IdentityManagement.Token.Claims">
            <summary>
            Roles that the user has
            </summary>
        </member>
        <member name="P:YonderSharp.IdentityManagement.Token.CreatedAt">
            <summary>
            Registration Date, UTC
            </summary>
        </member>
        <member name="P:YonderSharp.IdentityManagement.Token.IsBanned">
            <summary>
            Was the user a bad boy?
            Everything but DSGVO is forbidden!
            </summary>
        </member>
        <member name="P:YonderSharp.IdentityManagement.Token.Verification">
            <summary>
            Used for verification the integrity of the token. Don't change it, unless really appropiate!
            </summary>
        </member>
        <member name="M:YonderSharp.IdentityManagement.Token.#ctor(System.Guid,System.String,System.Collections.Generic.HashSet{System.String},System.DateTime,System.String)">
            <summary/>
        </member>
        <member name="M:YonderSharp.IdentityManagement.Token.#ctor">
            <summary/>
        </member>
        <member name="T:YonderSharp.IdentityManagement.User">
            <summary>
            Representation of a user
            </summary>
        </member>
        <member name="P:YonderSharp.IdentityManagement.User.UserId">
            <summary>
            Unique ID of the user
            </summary>
        </member>
        <member name="P:YonderSharp.IdentityManagement.User.EMail">
            <summary>
            Unique E-Mail Adress of the user
            </summary>
        </member>
        <member name="P:YonderSharp.IdentityManagement.User.RegistrationDateUtc">
            <summary>
            When did the user register?
            </summary>
        </member>
        <member name="P:YonderSharp.IdentityManagement.User.Salt">
            <summary>
            Salt of the PasswordHash
            </summary>
        </member>
        <member name="P:YonderSharp.IdentityManagement.User.SaltedPasswordHash">
            <summary>
            Salted PasswordHash
            </summary>
        </member>
        <member name="P:YonderSharp.IdentityManagement.User.IsBanned">
            <summary>
            Was the user a bad boy?
            </summary>
        </member>
        <member name="P:YonderSharp.IdentityManagement.User.VerificationId">
            <summary>
            Used for links from mails. Reset everytime it was successfully used!
            </summary>
        </member>
        <member name="M:YonderSharp.IProgressTracker.Progress(System.Int32,System.Int32)">
            <summary>
            Notify about some progress. i.e. 5/100
            </summary>
            <param name="currentStep">Which step was just finish?</param>
            <param name="totalStepCount">Total steps to finish</param>
        </member>
        <member name="T:YonderSharp.MicrosoftIdentityPlattform">
            <summary>
            Helper-class for the Microsoft identity Plattform
            https://docs.microsoft.com/de-de/azure/active-directory/develop/
            </summary>
        </member>
        <member name="M:YonderSharp.MicrosoftIdentityPlattform.GetValidatedUserId(System.String)">
            <param name="token">JWT that might or might not represent a valid user</param>
            <returns>The Guid of the user. If the JWT is invalid: Guid.Empty</returns>
        </member>
        <member name="M:YonderSharp.MyRandom.GetInt(System.Int32)">
            <summary>
            
            </summary>
            <param name="maxValue">max value that can be returned by this Method (excluding)</param>
            <returns></returns>
        </member>
        <member name="T:YonderSharp.ParsingHelper">
            <summary>
            Helperclass for parsing stuff
            </summary>
        </member>
        <member name="M:YonderSharp.ParsingHelper.DoubleToString(System.Double)">
            <summary>
            Transforms the string into a double, with a precession of 5
            </summary>
        </member>
        <member name="M:YonderSharp.ParsingHelper.StringToDouble(System.String)">
            <summary>
            Transforms the string into a double, with a precession of 5
            Expecting american numberstyle
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.Noise.NoiseConfiguration.Type">
            <summary>
            -> NoiseType enum
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.Noise.NoiseLayer.Type">
            <summary>
            -> NoiseType enum
            </summary>
        </member>
        <member name="M:YonderSharp.ProceduralGeneration.Model.Noise.NoiseLayer.GetConfiguration">
            <returns>Configuration representation of the Layer</returns>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.Noise.RandomPointLayer.MaxDistanceInMeters">
            <summary>
            Max distance to location in meters
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.Noise.RandomPointLayer.TimeIncrementsInMinutes">
            <summary>
            Time increments for new placement, to move the random results around through space AND time
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:YonderSharp.ProceduralGeneration.Model.Noise.RandomPointLayer.ChanceOfSpawn" -->
        <member name="P:YonderSharp.ProceduralGeneration.Model.Noise.RandomPointLayer.FieldSizeWsg84">
            <summary>
            Value that tells the size of a RandomPoint Field in WSG84 floating point units.
            Positive Numbers only!
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.Noise.RandomPointLayer.Seed">
            <summary>
            seed used for random generator
            </summary>
        </member>
        <member name="T:YonderSharp.ProceduralGeneration.Model.OSM.OsmNode">
            <summary>
            OpenStreetMapNode
            </summary>
        </member>
        <member name="M:YonderSharp.ProceduralGeneration.Model.OSM.OsmNode.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:YonderSharp.ProceduralGeneration.Model.OSM.OsmNode.#ctor(System.Int64,System.Double,System.Double,System.String,System.Collections.Generic.List{YonderSharp.ProceduralGeneration.Model.OSM.KeyValuePair})">
            <summary>
            Detailed constructor
            </summary>
            <param name="iD">Unique ID</param>
            <param name="latitude">North (Y) compenet of the WSG84 coordinate</param>
            <param name="longitude">East (X) compoinent of the WSG84 coordinate</param>
            <param name="name">Humanfriendly name of node</param>
            <param name="tags">tags that descripe the node in detail</param>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OsmNode.ID">
            <summary>
            Unique ID of the Node
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OsmNode.Latitude">
            <summary>
            North (Y) component of the coordinate
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OsmNode.Longitude">
            <summary>
            West (X) component of the coordinate
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OsmNode.Name">
            <summary>
            Human readable name of the Node
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OsmNode.Tags">
            <summary>
            K/V tags of the Node
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OSMPointsLayer.CityTypeCity">
            <summary>
            city = city
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OSMPointsLayer.CityTypeTown">
            <summary>
            city = town
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OSMPointsLayer.CityTypeSuburb">
            <summary>
            city = suburb
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OSMPointsLayer.CityTypeVillage">
            <summary>
            city = village
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OSMPointsLayer.CityTypeNeighbourhood">
            <summary>
            city = neighbourhood
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OSMPointsLayer.NodeTags">
            <summary>
            i.e. {"concentration_camp", "nazism"}
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OSMPointsLayer.MaxDistanceToCity">
            <summary>
            max distance that a city-type can be away
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OSMPointsLayer.MaxDistaToTag">
            <summary>
            max distance that a tag-type can be away (not a city, but i.e. a shop)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:YonderSharp.ProceduralGeneration.NoiseBuilder.DefaultNoiseBuilder.GetValue(FastNoise,YonderSharp.ProceduralGeneration.Model.Noise.NoiseType,System.Double,System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:YonderSharp.ProceduralGeneration.NoiseBuilder.DefaultNoiseBuilder.GetValue(FastNoise,YonderSharp.ProceduralGeneration.Model.Noise.NoiseType,System.Single,System.Single)" -->
        <member name="M:YonderSharp.ProceduralGeneration.NoiseBuilder.INoiseBuilder.GetNoiseValue(YonderSharp.ProceduralGeneration.Model.Noise.NoiseLayer,System.Double,System.Double)">
            <summary>
            Gets the Noise value of a layer without any zoom
            </summary>
        </member>
        <member name="M:YonderSharp.ProceduralGeneration.NoiseBuilder.INoiseBuilder.GetNoiseValue(YonderSharp.ProceduralGeneration.Model.Noise.NoiseConfiguration,System.Double,System.Double,System.Double)">
            <summary>
            Gets the Noise value of a layer with zoom
            </summary>
        </member>
        <member name="M:YonderSharp.Updater.UpdateChecker.CheckForUpdate(System.String)">
            <summary>
            Checks if there is any new release avaiable
            </summary>
            <param name="urlOfIndex">Url to the json File </param>
            <returns>true if there is an update avaible. false if everything is up to date</returns>
        </member>
        <member name="T:YonderSharp.WSG84.Area">
            <summary>
            Represents an rectacle, using the WSG84 floating point notation
            </summary>
        </member>
        <member name="T:YonderSharp.WSG84.GeoSorter">
            <summary>
            Helper for OSM data operations like sorting
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.GeoSorter.MakeKeyValueUniqueToClosest(YonderSharp.ProceduralGeneration.Model.OSM.OsmNode[],YonderSharp.WSG84.PointLatLng,System.String,System.String)">
            <summary>
            removes all dublicates of the key->value pair
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.GeoSorter.BringTagToStart(YonderSharp.ProceduralGeneration.Model.OSM.OsmNode[],System.String)">
            <summary>
            creates an array that starts with the wished key
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.GeoSorter.SortByDistance(YonderSharp.ProceduralGeneration.Model.OSM.OsmNode[],YonderSharp.WSG84.PointLatLng,System.Boolean)">
            <summary>
            Sorts the elements based on their distance to the point
            </summary>
        </member>
        <member name="T:YonderSharp.WSG84.NotAValidWsg84PointException">
            <summary>
            Either you've done something stupid, or something has gone terrible wrong somewhere...
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.NotAValidWsg84PointException.#ctor(YonderSharp.WSG84.PointLatLng)">
            <summary/>
        </member>
        <member name="M:YonderSharp.WSG84.NotAValidWsg84PointException.#ctor(System.Double,System.Double)">
            <summary/>
        </member>
        <member name="T:YonderSharp.WSG84.PointLatLng">
            <summary>
            Represents a Point, using the WSG84 float notation
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.PointLatLng.#ctor">
            <summary/>
        </member>
        <member name="M:YonderSharp.WSG84.PointLatLng.#ctor(System.Double,System.Double)">
            <param name="latitude">Y</param>
            <param name="longitude">X</param>
        </member>
        <member name="P:YonderSharp.WSG84.PointLatLng.Latitude">
            <summary>
            Y
            </summary>
        </member>
        <member name="P:YonderSharp.WSG84.PointLatLng.Longitude">
            <summary>
            X
            </summary>
        </member>
        <member name="T:YonderSharp.WSG84.WSG84Math">
            <summary>
            WSG84 related mathematical operations
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.GetDistanceInMeters(YonderSharp.WSG84.PointLatLng,System.Double,System.Double)">
            <summary>
            Returns the distance between two points in meters
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.GetDistanceInMeters(YonderSharp.WSG84.PointLatLng,YonderSharp.WSG84.PointLatLng)">
            <summary>
            Returns the distance between two points in meters
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.GetDistanceInMeters(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the distance between two points in meters
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.GetDistanceInKilometers(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Wicked math that determines the distance between 2 points
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.DegreeToRad(System.Double)">
            <summary>
            Go read a math book
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.RadToDegree(System.Double)">
            <summary>
            Go read a math book
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.GetAreaFor(YonderSharp.WSG84.PointLatLng,System.Double)">
            <summary>
            Returns an area which contains the circle created by the given parameters
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.GetAreaFor(System.Double,System.Double,System.Double)">
            <summary>
            Returns an area which contains the circle created by the given parameters
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.GetDestinationPoint(YonderSharp.WSG84.PointLatLng,System.Double,System.Double)">
            <summary>
            Calculates the end-point from a given source at a given range (meters) and bearing (degrees).
            This methods uses simple geometry equations to calculate the end-point.
            </summary>
            <param name="source">Point of origin</param>
            <param name="bearing">Bearing in degrees</param>
            <param name="distanceInMeters">Range in meters</param>
            <returns>End-point from the source given the desired range and bearing.</returns>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.IsValidWSG84Point(YonderSharp.WSG84.PointLatLng)">
            <summary>
            Checks if the given point is a valid point in the WSG84 coordinate system
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.IsValidWSG84Point(System.Double,System.Double)">
            <summary>
            Checks if the given point is a valid point in the WSG84 coordinate system
            </summary>
            <param name="latitude">Y</param>
            <param name="longitude">X</param>        
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.IsPointWithinArea(YonderSharp.WSG84.Area,YonderSharp.WSG84.PointLatLng)">
            <summary>
            Checks if a point is inside the given area
            </summary>
        </member>
        <member name="T:YonderSharp.Zipper">
            <summary>
            Helper class for zipping related operations
            </summary>
        </member>
        <member name="M:YonderSharp.Zipper.ZipBase64(System.String)">
            <summary>
            returns the compressed base64 byte[] representation of the content
            </summary>
        </member>
        <member name="M:YonderSharp.Zipper.Zip(System.String)">
            <summary>
            compresses the content
            </summary>
        </member>
        <member name="M:YonderSharp.Zipper.Unzip(System.Byte[])">
            <summary>
            Transformes the zipped bytes to their content string
            </summary>
        </member>
    </members>
</doc>

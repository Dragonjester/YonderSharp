<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YonderSharp</name>
    </assembly>
    <members>
        <member name="T:YonderSharp.Attributes.DataManagement.Disabled">
            <summary>
            Field is disabled in UI 
            </summary>
        </member>
        <member name="T:YonderSharp.Attributes.DataManagement.ForeignKey">
            <summary>
            A Foreign-Key that points to some <see cref="T:YonderSharp.Attributes.DataManagement.PrimaryKey"/>
            </summary>
        </member>
        <member name="P:YonderSharp.Attributes.DataManagement.ForeignKey.TargetClass">
            <summary>
            Type to which this ForeignKey points to
            </summary>
        </member>
        <member name="P:YonderSharp.Attributes.DataManagement.ForeignKey.TargetField">
            <summary>
            Field of the TargetClass to which the ForeignKey points to
            </summary>
        </member>
        <member name="M:YonderSharp.Attributes.DataManagement.ForeignKey.#ctor(System.Type,System.String)">
            <param name="targetClass">Class to which this FK points to</param>
            <param name="fieldName">Property of this class, to where the FK points to</param>
            <exception cref="T:System.ArgumentNullException">For the params className and fieldName</exception>
        </member>
        <member name="M:YonderSharp.Attributes.DataManagement.ForeignKey.GetAllForeignTables(System.Type)">
            <summary>
            Returns the types that are referenced as Foreign for the given type.
            i.e. if the given type has foreign relations to the types "book" and "shop" it will return those
            </summary>
        </member>
        <member name="T:YonderSharp.Attributes.DataManagement.PrimaryKey">
            <summary>
            Identifies something as the unique primary key. Usually, but not necessarily a <see cref="T:System.Guid"/>
            </summary>
        </member>
        <member name="T:YonderSharp.Attributes.DataManagement.Title">
            <summary>
            used to mark the member that is shown in the UI for FKs
            </summary>
        </member>
        <member name="M:YonderSharp.Attributes.DataManagement.Title.GetTitel(System.Object)">
            <summary>
            Returns the titel value for the given object
            </summary>
        </member>
        <member name="M:YonderSharp.Attributes.DataManagement.Title.TypeHasTitelAttribute(System.Object)">
            <summary>
            Does the Type of the given object contain a property that is declared [Title]
            </summary>
        </member>
        <member name="M:YonderSharp.Attributes.DataManagement.Title.TypeHasTitelAttribute(System.Type)">
            <summary>
            Does the Type contain a property that is declared [Title]
            </summary>
        </member>
        <member name="M:YonderSharp.Config.ConfigManager.GetAllKeys">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.Config.ConfigManager.GetValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.Config.ConfigManager.SetValue(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.Config.ConfigManager.Load">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.Config.ConfigManager.Save">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.Config.ConfigManager.Clear">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.Config.ConfigManager.SetDefaultConfig(System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.Config.IConfigManager.SetDefaultConfig(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets all key/value pairs for unknown keys.
            If the key is allready known, the existing configuration does not get overwritten!
            </summary>
        </member>
        <member name="M:YonderSharp.Config.IConfigManager.Clear">
            <summary>
            Deletes all Entries
            </summary>
        </member>
        <member name="T:YonderSharp.CopyProtection.CopyProtection">
            <summary>
            The Goal of this isn't to create 100% security. The goal is to prohibit that {stuff} can spread to the wild uncontrolled forever
            </summary>
        </member>
        <member name="M:YonderSharp.CopyProtection.CopyProtection.LastAllowedDay">
            <summary>
            Returns the date of the last day an application is allowed to run
            </summary>
        </member>
        <member name="M:YonderSharp.CopyProtection.CopyProtection.GetCompileDate">
            <summary>
            Gets the date of the last compilation.
            Auto generated via T4
            </summary>
        </member>
        <member name="T:YonderSharp.DataTypes.Tuple`2">
            <summary>
            System.Tuple is ReadOnly...
            </summary>
        </member>
        <member name="M:YonderSharp.Downloads.IUrlDownloader.LoadFromUrl(System.String)">
            <summary>
            Download the string content of the url
            </summary>
        </member>
        <member name="M:YonderSharp.Downloads.IUrlDownloader.LoadFromUrl(System.String,System.Boolean)">
            <summary>
            Download the string content of the url, without any cache!
            </summary>
        </member>
        <member name="M:YonderSharp.Downloads.UrlDownloader.LoadFromUrl(System.String)">
            <summary>
            Load the htmlbody from the web
            </summary>
            <param name="url">url of the ressource</param>
        </member>
        <member name="M:YonderSharp.Downloads.UrlDownloader.LoadFromUrl(System.String,System.Boolean)">
            <summary>
            Load the htmlbody from the web
            </summary>
            <param name="url">url of the ressource</param>
            <param name="forceDownload">Doesnt try to read from the local cache if <b>TRUE</b></param>
            <returns>the string represenation of the htmlBody that has been downloaded</returns>
        </member>
        <member name="T:YonderSharp.FileSources.IFileSource`1">
            <summary>
            simple Elementsource form hard disk
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.GetPathToJsonFile">
            <summary>
            Where is the content stored on the hard disk?
            </summary>
        </member>
        <member name="F:YonderSharp.FileSources.IFileSource`1.EntriesHaveChangedEvent">
            <summary>
            Raised when the list of known entries has changed
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.Add(`0[])">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.Add(System.Collections.Generic.IList{System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.Add(System.Collections.Generic.IList{`0})">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.GetGenericType">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.GetAll">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.Load(System.Boolean)">
            <summary>
            Deserialize the contents of the file into the list
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.Save">
            <summary>
            Stores all the objects into the file
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.GetTitle(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.GetTitles">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.GetByPrimaryKey(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.ElementAt(System.Int32)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.GetIndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.FileSources.IFileSource`1.GetIndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="T:YonderSharp.FileSources.ItemSource`1">
            <summary>
            A source for items. 
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.ItemSource`1.Remove(`0)">
            <summary>
            Remove the given element from the Source
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.ItemSource`1.Add(`0)">
            <summary>
            Add single element
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.ItemSource`1.Add(System.Collections.Generic.IList{`0})">
            <summary>
            Add multiple items to the list
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.ItemSource`1.Add(System.Collections.Generic.IList{System.Object})">
            <summary>
            WPF doesn't support generics, so some sources might want to add items of type object
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.ItemSource`1.Add(System.Object)">
            <summary>
            WPF doesn't support generics, so some sources might want to add items of type object
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.ItemSource`1.Add(`0[])">
            <summary>
            Add multiple items to the list
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.ItemSource`1.GetAll">
            <summary>
            Get All known Elements
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.ItemSource`1.ElementAt(System.Int32)">
            <summary>
            returns the nth element of the list (0 based)
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.ItemSource`1.GetByPrimaryKey(System.Object)">
            <summary>
            Returns the element identified by the PK
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.ItemSource`1.GetIndexOf(`0)">
            <summary>
            Returns the index of the given object in the list
            </summary>
        </member>
        <member name="P:YonderSharp.FileSources.ItemSourceContainer.Cache">
            <summary>
            READ ONLY
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:YonderSharp.FileSources.ItemSourceForLists" -->
        <member name="M:YonderSharp.FileSources.ItemSourceForLists.GetGenericType">
            <summary>
            Helper Method for reflection purposes
            Also: WPF doesn't support generics :(
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.ItemSourceForLists.GetTitles">
            <summary>
            Return the shown titles for the known entries
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.ItemSourceForLists.GetTitle(System.Object)">
            <summary>
            Generates the title for the given object, if it is of the type declared via GetGenericType()
            </summary>
        </member>
        <member name="M:YonderSharp.FileSources.ItemSourceForLists.Clear">
            <summary>
             Empties the list
             </summary>
        </member>
        <member name="M:YonderSharp.FileSources.ItemSourceForLists.GetIndexOf(System.Object)">
            <summary>
            Determines the index of the given object
            </summary>
        </member>
        <member name="M:YonderSharp.Geocaching.EhemaligerLandkreisWaldeck.CoordReplace(System.String,System.String,System.Int32)">
            <summary>
            Replace {a} with {b} in the context of the whitespaced string
            </summary>
        </member>
        <member name="M:YonderSharp.IProgressTracker.Progress(System.Int32,System.Int32)">
            <summary>
            Notify about some progress. i.e. 5/100
            </summary>
            <param name="currentStep">Which step was just finish?</param>
            <param name="totalStepCount">Total steps to finish</param>
        </member>
        <member name="M:YonderSharp.ILevenshteinDistanceCalculator.CalculateLevenshteinDistance(System.String,System.String)">
            <summary>
            Calculates the Levenshtein distance between two strings
            </summary>
            <param name="first">The first string</param>
            <param name="second">The second string</param>
            <returns>The number of changes that need to be made to convert the first string to the second.</returns>
        </member>
        <member name="M:YonderSharp.ILevenshteinDistanceCalculator.CalculateLevenshteinDistanceIgnoringCase(System.String,System.String)">
            <summary>
            Calculates the Levenshtein distance between two strings, without being case sensitive
            </summary>
            <param name="first">The first string</param>
            <param name="second">The second string</param>
            <returns>The number of changes that need to be made to convert the first string to the second.</returns>
        </member>
        <member name="M:YonderSharp.LevenshteinDistanceCalculator.CalculateLevenshteinDistance(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:YonderSharp.LevenshteinDistanceCalculator.CalculateLevenshteinDistanceIgnoringCase(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:YonderSharp.MicrosoftIdentityPlattform">
            <summary>
            Helper-class for the Microsoft identity Plattform
            https://docs.microsoft.com/de-de/azure/active-directory/develop/
            </summary>
        </member>
        <member name="M:YonderSharp.MicrosoftIdentityPlattform.GetValidatedUserId(System.String)">
            <param name="token">JWT that might or might not represent a valid user</param>
            <returns>The Guid of the user. If the JWT is invalid: Guid.Empty</returns>
        </member>
        <member name="M:YonderSharp.MyRandom.GetInt(System.Int32)">
            <param name="maxValue">max value that can be returned by this Method (excluding)</param>
            <returns></returns>
        </member>
        <member name="T:YonderSharp.ParsingHelper">
            <summary>
            Helperclass for parsing stuff
            </summary>
        </member>
        <member name="M:YonderSharp.ParsingHelper.DoubleToString(System.Double)">
            <summary>
            Transforms the string into a double, with a precession of 5
            </summary>
        </member>
        <member name="M:YonderSharp.ParsingHelper.StringToDouble(System.String)">
            <summary>
            Transforms the string into a double, with a precession of 5
            Expecting american numberstyle
            </summary>
        </member>
        <member name="M:YonderSharp.ParsingHelper.ReplaceUmlauteWithXmlEncoding(System.String)">
            <summary>
            Fuck Umlaute
            </summary>
        </member>
        <member name="T:YonderSharp.Permutations">
            <summary>
            EO: 2016-04-14
            Generator of all permutations of an array of anything.
            Base on Heap's Algorithm. See: https://en.wikipedia.org/wiki/Heap%27s_algorithm#cite_note-3
            </summary>
        </member>
        <member name="M:YonderSharp.Permutations.ForAllPermutation``1(``0[],System.Func{``0[],System.Boolean})">
            <summary>
            Heap's algorithm to find all pmermutations. Non recursive, more efficient.
            </summary>
            <param name="items">Items to permute in each possible ways</param>
            <param name="funcExecuteAndTellIfShouldStop"></param>
            <returns>Return true if cancelled</returns> 
        </member>
        <member name="M:YonderSharp.Permutations.GetPermutations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            This function is to show a linq way but is far less efficient
            From: StackOverflow user: Pengyang : http://stackoverflow.com/questions/756055/listing-all-permutations-of-a-string-integer
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:YonderSharp.Permutations.Swap``1(``0@,``0@)">
            <summary>
            Swap 2 elements of same type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:YonderSharp.Permutations.Test">
            <summary>
            Func to show how to call. It does a little test for an array of 4 items.
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.Noise.NoiseConfiguration.Type">
            <summary>
            -> NoiseType enum
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.Noise.NoiseLayer.Type">
            <summary>
            -> NoiseType enum
            </summary>
        </member>
        <member name="M:YonderSharp.ProceduralGeneration.Model.Noise.NoiseLayer.GetConfiguration">
            <returns>Configuration representation of the Layer</returns>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.Noise.RandomPointLayer.MaxDistanceInMeters">
            <summary>
            Max distance to location in meters
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.Noise.RandomPointLayer.TimeIncrementsInMinutes">
            <summary>
            Time increments for new placement, to move the random results around through space AND time
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:YonderSharp.ProceduralGeneration.Model.Noise.RandomPointLayer.ChanceOfSpawn" -->
        <member name="P:YonderSharp.ProceduralGeneration.Model.Noise.RandomPointLayer.FieldSizeWsg84">
            <summary>
            Value that tells the size of a RandomPoint Field in WSG84 floating point units.
            Positive Numbers only!
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.Noise.RandomPointLayer.Seed">
            <summary>
            seed used for random generator
            </summary>
        </member>
        <member name="T:YonderSharp.ProceduralGeneration.Model.OSM.OsmNode">
            <summary>
            OpenStreetMapNode
            </summary>
        </member>
        <member name="M:YonderSharp.ProceduralGeneration.Model.OSM.OsmNode.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:YonderSharp.ProceduralGeneration.Model.OSM.OsmNode.#ctor(System.Int64,System.Double,System.Double,System.String,System.Collections.Generic.List{YonderSharp.ProceduralGeneration.Model.OSM.KeyValuePair})">
            <summary>
            Detailed constructor
            </summary>
            <param name="iD">Unique ID</param>
            <param name="latitude">North (Y) compenet of the WSG84 coordinate</param>
            <param name="longitude">East (X) compoinent of the WSG84 coordinate</param>
            <param name="name">Humanfriendly name of node</param>
            <param name="tags">tags that descripe the node in detail</param>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OsmNode.ID">
            <summary>
            Unique ID of the Node
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OsmNode.Latitude">
            <summary>
            North (Y) component of the coordinate
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OsmNode.Longitude">
            <summary>
            West (X) component of the coordinate
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OsmNode.Name">
            <summary>
            Human readable name of the Node
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OsmNode.Tags">
            <summary>
            K/V tags of the Node
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OSMPointsLayer.CityTypeCity">
            <summary>
            city = city
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OSMPointsLayer.CityTypeTown">
            <summary>
            city = town
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OSMPointsLayer.CityTypeSuburb">
            <summary>
            city = suburb
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OSMPointsLayer.CityTypeVillage">
            <summary>
            city = village
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OSMPointsLayer.CityTypeNeighbourhood">
            <summary>
            city = neighbourhood
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OSMPointsLayer.NodeTags">
            <summary>
            i.e. {"concentration_camp", "nazism"}
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OSMPointsLayer.MaxDistanceToCity">
            <summary>
            max distance that a city-type can be away
            </summary>
        </member>
        <member name="P:YonderSharp.ProceduralGeneration.Model.OSM.OSMPointsLayer.MaxDistaToTag">
            <summary>
            max distance that a tag-type can be away (not a city, but i.e. a shop)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:YonderSharp.ProceduralGeneration.NoiseBuilder.DefaultNoiseBuilder.GetValue(FastNoise,YonderSharp.ProceduralGeneration.Model.Noise.NoiseType,System.Double,System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:YonderSharp.ProceduralGeneration.NoiseBuilder.DefaultNoiseBuilder.GetValue(FastNoise,YonderSharp.ProceduralGeneration.Model.Noise.NoiseType,System.Single,System.Single)" -->
        <member name="M:YonderSharp.ProceduralGeneration.NoiseBuilder.INoiseBuilder.GetNoiseValue(YonderSharp.ProceduralGeneration.Model.Noise.NoiseLayer,System.Double,System.Double)">
            <summary>
            Gets the Noise value of a layer without any zoom
            </summary>
        </member>
        <member name="M:YonderSharp.ProceduralGeneration.NoiseBuilder.INoiseBuilder.GetNoiseValue(YonderSharp.ProceduralGeneration.Model.Noise.NoiseConfiguration,System.Double,System.Double,System.Double)">
            <summary>
            Gets the Noise value of a layer with zoom
            </summary>
        </member>
        <member name="T:YonderSharp.ScreenCapture">
            <summary>
            https://stackoverflow.com/a/24879511/1171328
            </summary>
        </member>
        <member name="M:YonderSharp.Updater.UpdateChecker.CheckForUpdate(System.String)">
            <summary>
            Checks if there is any new release avaiable
            </summary>
            <param name="urlOfIndex">Url to the json File </param>
            <returns>true if there is an update avaible. false if everything is up to date</returns>
        </member>
        <member name="M:YonderSharp.WPF.DataManagement.IForeignKeyListChangedListener.OnForeignKeyListChanged(System.Type)">
            <param name="type">The type of the list that changed</param>
        </member>
        <member name="T:YonderSharp.WSG84.Area">
            <summary>
            Represents an rectacle, using the WSG84 floating point notation
            </summary>
        </member>
        <member name="T:YonderSharp.WSG84.GeoSorter">
            <summary>
            Helper for OSM data operations like sorting
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.GeoSorter.MakeKeyValueUniqueToClosest(YonderSharp.ProceduralGeneration.Model.OSM.OsmNode[],YonderSharp.WSG84.PointLatLng,System.String,System.String)">
            <summary>
            removes all dublicates of the key->value pair
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.GeoSorter.BringTagToStart(YonderSharp.ProceduralGeneration.Model.OSM.OsmNode[],System.String)">
            <summary>
            creates an array that starts with the wished key
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.GeoSorter.SortByDistance(YonderSharp.ProceduralGeneration.Model.OSM.OsmNode[],YonderSharp.WSG84.PointLatLng,System.Boolean)">
            <summary>
            Sorts the elements based on their distance to the point
            </summary>
        </member>
        <member name="T:YonderSharp.WSG84.NotAValidWsg84PointException">
            <summary>
            Either you've done something stupid, or something has gone terrible wrong somewhere...
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.NotAValidWsg84PointException.#ctor(YonderSharp.WSG84.PointLatLng)">
            <summary/>
        </member>
        <member name="M:YonderSharp.WSG84.NotAValidWsg84PointException.#ctor(System.Double,System.Double)">
            <summary/>
        </member>
        <member name="T:YonderSharp.WSG84.PointLatLng">
            <summary>
            Represents a Point, using the WSG84 float notation
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.PointLatLng.#ctor">
            <summary/>
        </member>
        <member name="M:YonderSharp.WSG84.PointLatLng.#ctor(System.Double,System.Double)">
            <param name="latitude">Y</param>
            <param name="longitude">X</param>
        </member>
        <member name="P:YonderSharp.WSG84.PointLatLng.Latitude">
            <summary>
            Y
            </summary>
        </member>
        <member name="P:YonderSharp.WSG84.PointLatLng.Longitude">
            <summary>
            X
            </summary>
        </member>
        <member name="T:YonderSharp.WSG84.WSG84Math">
            <summary>
            WSG84 related mathematical operations
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.GetDistanceInMeters(YonderSharp.WSG84.PointLatLng,System.Double,System.Double)">
            <summary>
            Returns the distance between two points in meters
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.GetDistanceInMeters(YonderSharp.WSG84.PointLatLng,YonderSharp.WSG84.PointLatLng)">
            <summary>
            Returns the distance between two points in meters
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.GetDistanceInMeters(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the distance between two points in meters
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.GetDistanceInKilometers(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Wicked math that determines the distance between 2 points
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.DegreeToRad(System.Double)">
            <summary>
            Go read a math book
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.RadToDegree(System.Double)">
            <summary>
            Go read a math book
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.GetAreaFor(YonderSharp.WSG84.PointLatLng,System.Double)">
            <summary>
            Returns an area which contains the circle created by the given parameters
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.GetAreaFor(System.Double,System.Double,System.Double)">
            <summary>
            Returns an area which contains the circle created by the given parameters
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.GetDestinationPoint(YonderSharp.WSG84.PointLatLng,System.Double,System.Double)">
            <summary>
            Calculates the end-point from a given source at a given range (meters) and bearing (degrees).
            This methods uses simple geometry equations to calculate the end-point.
            </summary>
            <param name="source">Point of origin</param>
            <param name="bearing">Bearing in degrees</param>
            <param name="distanceInMeters">Range in meters</param>
            <returns>End-point from the source given the desired range and bearing.</returns>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.IsValidWSG84Point(YonderSharp.WSG84.PointLatLng)">
            <summary>
            Checks if the given point is a valid point in the WSG84 coordinate system
            </summary>
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.IsValidWSG84Point(System.Double,System.Double)">
            <summary>
            Checks if the given point is a valid point in the WSG84 coordinate system
            </summary>
            <param name="latitude">Y</param>
            <param name="longitude">X</param>        
        </member>
        <member name="M:YonderSharp.WSG84.WSG84Math.IsPointWithinArea(YonderSharp.WSG84.Area,YonderSharp.WSG84.PointLatLng)">
            <summary>
            Checks if a point is inside the given area
            </summary>
        </member>
        <member name="T:YonderSharp.Zipper">
            <summary>
            Helper class for zipping related operations
            </summary>
        </member>
        <member name="M:YonderSharp.Zipper.ZipBase64(System.String)">
            <summary>
            returns the compressed base64 byte[] representation of the content
            </summary>
        </member>
        <member name="M:YonderSharp.Zipper.Zip(System.String)">
            <summary>
            compresses the content
            </summary>
        </member>
        <member name="M:YonderSharp.Zipper.Zip(System.Object,System.String)">
            <summary>
            Turns the object into a JSON, zips it and stores it into a file
            </summary>
        </member>
        <member name="M:YonderSharp.Zipper.Zip(System.String,System.String)">
            <summary>
            Zips the string and stores it into a file
            </summary>
        </member>
        <member name="M:YonderSharp.Zipper.Unzip``1(System.String)">
            <summary>
            Unzips a file created by the Zip(object, path) method
            </summary>
        </member>
        <member name="M:YonderSharp.Zipper.Unzip(System.Byte[])">
            <summary>
            Transformes the zipped bytes to their content string
            </summary>
        </member>
    </members>
</doc>
